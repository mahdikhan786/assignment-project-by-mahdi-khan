{"version":3,"sources":["components/csstools.js","components/htmltools.js","components/jstools.js","components/baseencoderdecoder.js","App.js","serviceWorker.js","index.js"],"names":["cssbeautify","require","Csstools","props","state","fileData","textData","e","preventDefault","file","document","querySelector","files","reader","FileReader","daata","onload","target","result","setState","readAsText","this","value","data","indent","openbrace","autosemicolon","console","log","error","innerHTML","className","type","required","onClick","change","wrap","onChange","textChange","finalRender","style","textAlign","React","Component","htmlFormatter","Htmltools","render","replace","beautify","Jstools","formatdata","base64","utf8","Baseencoderdecoder","param","utfEncode","encode","baseDecode","decode","App","href","Boolean","window","location","hostname","match","ReactDOM","hydrate","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.a9d1980b.chunk.js","sourcesContent":["import React from \"react\";\r\nvar cssbeautify = require('cssbeautify');\r\nexport default class Csstools extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { fileData: \"\", textData: \"\" };\r\n  }\r\n  change(e) {\r\n    e.preventDefault(); \r\n\r\n    const file = document.querySelector(\".css-file\").files[0];\r\n    const reader = new FileReader();\r\n    var daata = \"\";\r\n    reader.onload = e => {\r\n      daata = e.target.result;\r\n      this.setState({ fileData: daata });\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n  textChange(e) {\r\n    this.setState({ ...this.state, textData: e.target.value });\r\n  }\r\n  finalRender() {\r\n    var data = this.state.textData || this.state.fileData;\r\n    try {\r\ndata = cssbeautify(data, {\r\n  indent: '  ',\r\n  openbrace: 'separate-line',\r\n  autosemicolon: true\r\n})\r\nconsole.log(data);\r\n    } catch (error) {\r\n      document.querySelector(\".css-formatter-final\").innerHTML = `this ${error}`;\r\n    }\r\n    document.querySelector(\".css-formatter-final\").innerHTML = data;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n      <h2>CSS TOOLS</h2>\r\n        <p>Submit your code below: </p> <br />\r\n        <form>\r\n        <input className=\"css-file\" type=\"file\" required></input>\r\n        <button type=\"submit\" onClick={e => this.change(e)}>Submit</button>\r\n        </form>\r\n        <textarea\r\n          className=\"text\"\r\n          wrap=\"true\"\r\n          onChange={e => this.textChange(e)}\r\n        ></textarea>\r\n        <div className=\"res\">\r\n          <p>\r\n            YOUR INPUT Data:\r\n            <br />\r\n            {this.state.textData}\r\n          </p>\r\n          <p>\r\n            Your File Data <br /> {this.state.fileData}\r\n          </p>\r\n        </div>\r\n        <br />\r\n        <button onClick={e => this.finalRender(e)}>Format</button>\r\n        <pre className=\"css-formatter-final\" style={{textAlign:'left'}}></pre>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nvar htmlFormatter = require('html-formatter');\r\nexport default class Htmltools extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { fileData: \"\", textData: \"\" };\r\n  }\r\n  change(e) {\r\n    e.preventDefault(); \r\n\r\n    const file = document.querySelector(\".html-file\").files[0];\r\n    console.log(file);\r\n    const reader = new FileReader();\r\n    var daata = \"\";\r\n    reader.onload = e => {\r\n      daata = e.target.result;\r\n      this.setState({ fileData: daata });\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n  textChange(e) {\r\n    this.setState({ ...this.state, textData: e.target.value });\r\n  }\r\n  finalRender() {\r\n    var data = this.state.textData || this.state.fileData;\r\n    try {\r\n      data = htmlFormatter.render(data);\r\n      console.log(data);\r\n    } catch (error) {\r\n      document.querySelector(\".html-formatter-final\").innerHTML = `this ${error}`;\r\n    }\r\n    document.querySelector(\".html-formatter-final\").innerHTML = data.replace(/</ig, '&lt;').replace(/>/ig, '&gt;');\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n      <h2>HTML TOOLS</h2>\r\n        <p>Submit your code below :</p> <br />\r\n       <form>\r\n        <input className=\"html-file\" type=\"file\" required></input>\r\n        <button type=\"submit\" onClick={e => this.change(e)}>Submit</button>\r\n        </form>\r\n        <textarea\r\n          className=\"text\"\r\n          wrap=\"true\"\r\n          onChange={e => this.textChange(e)}\r\n        ></textarea>\r\n        <div className=\"res\">\r\n          <p>\r\n            YOUR INPUT Data:\r\n            <br />\r\n            {this.state.textData}\r\n          </p>\r\n          <p>\r\n            Your File Data :  <br /> {this.state.fileData}\r\n          </p>\r\n        </div>\r\n        <br />\r\n        <button onClick={e => this.finalRender(e)}>Format</button>\r\n        <pre className=\"html-formatter-final\" style={{textAlign:\"start\"}} ></pre>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nvar beautify = require('js-beautify');\r\n\r\nexport default class Jstools extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { fileData: \"\", textData: \"\" };\r\n  }\r\n  change(e) {\r\n    e.preventDefault(); \r\n    const file = document.querySelector(\".js-file\").files[0];\r\n    const reader = new FileReader();\r\n    var daata = \"\";\r\n    reader.onload = e => {\r\n      daata = e.target.result;\r\n      this.setState({ fileData: daata });\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n  textChange(e) {\r\n    this.setState({ ...this.state, textData: e.target.value });\r\n  }\r\n  finalRender() {\r\n    var formatdata = this.state.textData || this.state.fileData;\r\n    try {\r\n      formatdata = beautify(formatdata);\r\n        console.log(formatdata);\r\n    } catch (error) {\r\n      document.querySelector(\".js-formatter-final\").innerHTML = `this ${error}`;\r\n    }\r\n    document.querySelector(\".js-formatter-final\").innerHTML = formatdata;\r\n  }\r\n \r\n\r\n  \r\n  render() {\r\n    return (\r\n      <div>\r\n      <h2>JS TOOLS</h2>\r\n        <p>Submit your code below :</p> <br />\r\n        <form>\r\n        <input className=\"js-file\" type=\"file\" required></input>\r\n        <button type=\"submit\" onClick={e => this.change(e)}>Submit</button>\r\n        </form>\r\n        <textarea\r\n          className=\"text\"\r\n          wrap=\"true\"\r\n          onChange={e => this.textChange(e)}\r\n        ></textarea>\r\n        <div className=\"res\">\r\n          <p>\r\n            YOUR INPUT Data:\r\n            <br />\r\n            {this.state.textData}\r\n          </p>\r\n          <p>\r\n            Your File Data : <br /> {this.state.fileData}\r\n          </p>\r\n        </div>\r\n        <br />\r\n        <button onClick={e => this.finalRender(e)}>Format</button>\r\n        <pre style={{textAlign:\"start\"}} className=\"js-formatter-final\" ></pre>\r\n        {/* <button onClick={e => this.minify(e)}>minify</button> */}\r\n\r\n        {/* <pre style={{textAlign:\"start\"}} className=\"js-minifier-final\" ></pre> */}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nvar base64 =  require('base-64');\r\nvar utf8 = require('utf8');\r\nexport default class Baseencoderdecoder extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {textData: \"\" };\r\n  }\r\n  change() {\r\n    const file = document.querySelector(\".file\").files[0];\r\n    const reader = new FileReader();\r\n    var daata = \"\";\r\n    reader.onload = e => {\r\n      daata = e.target.result;\r\n      this.setState({ fileData: daata });\r\n    };\r\n    reader.readAsText(file);\r\n  }\r\n  textChange(e) {\r\n    this.setState({ textData: e.target.value });\r\n  }\r\n  finalRender(e, param) {\r\n    var data = this.state.textData;\r\n    try {\r\n         if(param === 'encode'){\r\n             var utfEncode = utf8.encode(data);\r\n             var baseEncode = base64.encode(utfEncode);\r\n             data = baseEncode;\r\n         }else{\r\n            var baseDecode = base64.decode(data);\r\n            var utf8Decode = utf8.decode(baseDecode);\r\n            data = utf8Decode; \r\n         }\r\n\r\n        console.log(data);\r\n    } catch (error) {\r\n      document.querySelector(\".encoder-decoder-final\").innerHTML = `this ${error}`;\r\n    }\r\n    document.querySelector(\".encoder-decoder-final\").innerHTML = data;\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n      <h2>Base64 Encoder Decoder </h2>\r\n        <p>Submit your code below</p> <br />\r\n        <textarea\r\n          className=\"text\"\r\n          wrap=\"true\"\r\n          onChange={e => this.textChange(e)}\r\n        ></textarea>\r\n        <div className=\"res\">\r\n          <p>\r\n            YOUR INPUT Data:\r\n            <br />\r\n            {this.state.textData}\r\n          </p>\r\n          <p>\r\n            Your File Data <br /> {this.state.fileData}\r\n          </p>\r\n        </div>\r\n        <br />\r\n        <button onClick={e => this.finalRender(e, 'encode')}>encode</button>\r\n        <button onClick={e => this.finalRender(e, 'decode')}>decode</button>\r\n        <pre  className=\"encoder-decoder-final\" ></pre>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Csstools from './components/csstools';\nimport Htmltools from './components/htmltools';\nimport Jstools from './components/jstools';\nimport Baseencoderdecoder from './components/baseencoderdecoder';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <h1>Assignment Project For Aspire Tech By<br /> <a href='https://www.twitter.com/_khansofficial'>Mahdi Khan</a><br /> (work in Progress)</h1>\n   \n   <Csstools />\n   <Htmltools />\n   <Jstools />\n   <Baseencoderdecoder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.hydrate(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}